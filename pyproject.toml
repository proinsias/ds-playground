[tool.poetry]
# Keep these in sync with CHANGELOG.md and the main __init__.py file.
name = "heart-disease"
version = "0.1.0"
description = "Demo machine learning project using the UCI Heart Disease dataset"
authors = ["Francis T. O'Donovan <proinsias@users.noreply.github.com>"]
license = "Unlicense"
readme = "README.md"
packages = [{include = "heart_disease"}]
repository = "https://github.com/proinsias/heart-disease"
# documentation = "{{ repository_provider }}/{{ repository_namespace }}/{{ package_name_py }}/docs"
classifiers = [
    "Environment :: Other Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: The Unlicense (Unlicense)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["heart", "disease", "healthcare", "machine-learning", "data-science"]
include = ["AUTHORS", "LICENSE", "README.md", "CHANGELOG.md"]

[tool.poetry.urls]
"Bug Tracker" = "https://proinsias.github.io/heart-disease/issues"
"Homepage" = "https://proinsias.github.io/heart-disease/"

[tool.poetry.scripts]
# Note the use of underscores instead of hyphens in the module name!
heart-disease = "heart_disease.main:app"

[tool.poetry.dependencies]
# Add packages to this section via:
# $ poetry add package>=1.2.3
python = ">=3.10,<3.11"  # For ydata-profiling.
ipywidgets = "*"
jupyterlab = "*"
matplotlib = "*"
missingno = "*"
pandas = "*"
plotly = "*"
requests = "*"
seaborn = "*"
ydata-profiling = "*"

[tool.poetry.group.dev.dependencies]
# Add packages to this section via:
# $ poetry add package>=1.2.3 --group dev
absolufy-imports = "*"
add-trailing-comma = "*"
auto-walrus = "*"
blacken-docs = "*"
darglint = "*"
flynt = "*"
gitlint = "*"
ipykernel = "*"
mypy = "*"
poethepoet = "*"
pre-commit = "*"
pycln = "*"
pytest = "*"
pytest-black = "*"
pytest-cov = "*"
pytest-mock = "*"
pytest-profiling = "*"
pytest-sphinx = "*"
pytest-sugar = "*"
pytest-xdist = "*"
refurb = "*"
ruff = "*"
sqlfluff = "*"
texthooks = "*"
toml = "*"
vulture = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.bandit]
# exclude_dirs = [".venv", "shared"]

[tool.bandit.assert_used]
# skips = ['*_test.py', '*test_*.py', '*unittest.py']

[tool.darglint]
docstring_style = 'sphinx'  # Alternatives are 'google', 'sphinx' and 'numpy'.
strictness = 'full'  # Default. Alternatives are 'short' and 'long'.

[tool.docformatter]
recursive = true
wrap-descriptions = 120
wrap-summaries = 120

[tool.pytest.ini_options]
# Add command line options to pytest.
# doctest-modules: run doctests from docstrings in all python modules.
# durations: print duration of slowest tests
# verbose: increase verbosity.
addopts = "--doctest-modules --durations=0 --durations-min=1.0 --verbose"
# Enable log display during test run.
log_cli = true
testpaths = [
    "heart_disease",
    "tests",
]

[tool.sqlfluff.core]
# dialect = "mysql"

[tool.sqlfluff.rules]
comma_style = "leading"
# tab_space_size = 2

[tool.sqlfluff.rules.L010]
# capitalisation_policy = lower

[tool.sqlfluff.rules.L052]
# Semi-colon formatting approach
multiline_newline = true
require_final_semicolon = true

[tool.ruff]

builtins = ["_"]

# Avoiding flagging (and removing) `V101` from any `# noqa`
# directives, despite Ruff's lack of support for `vulture`.
external = ["V101"]

select = [
    "A",   # flake8-builtins
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "COM", # flake8-commas
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "EM",  # flake8-errmsg
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    "FBT", # flake8-boolean-trap
    "G",   # flake8-logging-format
    "I",   # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "INT", # flake8-gettext
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "NPY", # numpy
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # ruff
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
    "YTT", # flake8-2020
]

ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py38"  # Keep in sync with tool.poetry.dependencies.python

[tool.ruff.isort]

[tool.ruff.pycodestyle]
max-doc-length = 88  # Black.

[tool.ruff.pydocstyle]
convention = "google"  # Accepts: "google", "numpy", or "pep257".

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
